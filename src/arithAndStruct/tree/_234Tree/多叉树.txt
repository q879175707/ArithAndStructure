	在二叉树中，每个节点有一个数据项，最多有两个子节点。如果允许每个节点可以有更多的数据项和更多的子节点，
就是多叉树。
	2-3-4树，就是多叉树，它的每个节点最多有四个子节点和三个数据项。它像红-黑树一样是平衡树。它的效率
比红-黑树稍差，但编程容易。
	B-树是另一种多叉树，专门用在外部存储中来组织数据（磁盘驱动器）。B-树中的节点可以有几十或几百个子节点

名字的含义
	2-3-4树名字中的2、3、4的含义是指一个节点可能含有的子节点的个数。对非叶节点有三种可能的情况：
	1.有一个数据项的节点总是有两个子节点。
	2.有两个数据项的节点总是有三个子节点。
	3.有三个数据项的节点总是有四个子节点。
	简而言之，非叶子节点的子节点数总是比它含有的数据项多1.
	
	因为2-3-4树最多可以有四个子节点的节点，也可以称它为4叉树。
	在2-3-4树中，不允许只有一个链接。有一个数据项的节点必须总是保持有两个链接，除非它是叶节点，在
那种情况下没有链接。

2-3-4树的组织
	用从0-2的数字给数据项编号，用0-3的数字给子节点链编号。节点中的数据项按关键字值升序排列。
	2-3-4树的规则：
	1.根是child0的子树的所有子节点的关键字值小于key0.
	2.根是child1的子树的所有子节点的关键字值大于key0并且小于key1.
	3.根是child2的子树的所有子节点的关键字值大于key1并且小于key2.
	4.根是child3的子树的所有子节点的关键字值大于key2.
	2-3-4树中一般不允许出现重复关键字值，所以不用考虑比较相同的关键字值的情况。
	
查找
	与二叉搜索树一样的思路
插入
	新的数据项总是插在叶节点，在树的最底层。如果插入到有子节点的节点中，子节点的编号就要发生变化以此来保持树的结构，这保证了
节点的子节点比数据项多1.
	查找到适当的叶节点插入。查找时没有碰到满节点时，插入很简单。找到合适的叶节点后，只要把新数据项插入进去就可以了。
	可能会涉及到在一个节点中移动一个或者两个其他的数据项，这样在新数据项插入后关键值仍保持正确的顺序。
节点分裂
	如果寻找要插入位置的路途中，节点已经满了，节点必须分裂。正是这种分裂过程保证了树的平衡。
	把要分裂节点中的数据项设为A、B、C。（假设正在分裂的节点不是根）
	1.创建一个新的空节点。它是要分裂节点的兄弟，在要分裂节点的右边。
	2.数据项C移到新节点中。
	3.数据项B移到要分裂节点的父节点中。
	4.数据项A保留在原来的位置上。
	5.最右边的两个子节点从要分裂节点处断开，连到新节点上。
	插入只需要分裂一个节点，除非插入路径上存在不止一个满的节点。这种情况就需要多重分裂。
根的分裂
	如果一开始查找插入点时就碰到满的根时，插入过程更复杂一点：
	1.创建新的根。它是要分裂节点的父节点。
	2.创建第二个新的节点。它是要分裂节点的兄弟节点。
	3.数据项C移到新的兄弟节点中。
	4.数据项B移到新的根节点中。
	5.数据项A保留在原来的位置上。
	6.要分裂节点最右边的两个子节点断开连接，连到新的兄弟节点中。
在下行路途中分裂
	因为所有满的节点都是在下行路途中分裂的，分裂不可能向回波及到树上面的节点。任何要分裂节点的父节点肯定不是满的，因此该节点不需要
分裂就可以插入数据项B。当然，如果父节点的子节点分裂时它已经有两个子节点了，它就变满了。但是，这只是意味着下次查找碰到它时才需要分裂。