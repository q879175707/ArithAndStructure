求算数表达式的值。分两步实现算法：
1.将算数表达式转换成另一种形式：后缀表达式。
2.计算后缀表达式的值。


后缀表达式
	日常算数表达式是将操作符(+,-,*,/)放在两个操作数之间的。因为操作符写在操作数的中间，所以把这种写法称为
中缀表达法。如 2 + 2; 4/7, A +B等。
	在后缀表达式中，操作符跟在两个操作数的后面。这样 A + B就成为AB+,A/B就成为AB/
	粗略地说，“解”算数表达式的时候，应该遵循下列几条规则：
	1.从左到右读取算式。
	2.已经读到了可以计算值的两个操作数和一个操作符时，就可以计算，并用计算结果代替那两个操作数和那个操作符（可能需要处理左边的一些还没有解决的操作。）。
	3.继续这个过程——从左到右，能算就算——直到表达式的结尾。
	
	如何将中缀表达式转换成后缀表达式。
	从左到右地读取中缀表达式，顺序地查看每一个字符。在此过程中，将这些操作数和操作符复制到后缀表达式输出的字符串中。
	如果中缀字符串中的字符是操作数，则立即把它复制到后缀字符串中。一定不要延迟：督导操作数就复制它们，而不去管多久
	后才能复制和它们关联的操作符。
	复制操作符，规则和计算中缀表达式一样。一旦可以利用操作符求中缀表达式的某部分的值，就把该运算符复制到后缀字符串中。
	在数字求值的过程中，需要向前和向后两个方向来扫描中缀表达式，以完成后缀表达的转换。当某个操作符后面的操作符优先级
	更高或者为左括号时，就不能把这个操作符输出到后缀表达字符串中。如果真的是这种情况，高优先级别的操作符或者括号中的
	操作符必须要比低优先级的操作符更早写到后缀表达字符串中。
	
	从中缀到后缀的转换过程中，操作符的顺序是颠倒的。因为第一个操作符必须等到第二个操作符输出后才能输出，所以操作符在
	后缀字符串中的顺序和中缀字符串中的顺序是相反的。

	这种颠倒的顺序按时用栈来存储操作符是一种很好的方法。
	从某方面来捉，由栈中弹出数据项实际上能向后扫描输入字符串。我们并没有扫描整个输入字符串，而只是检查操作符和括号。
	他们在读输入串的时候就已经被压入栈中，所以现在可以通过出栈逆序重调用它们。
	操作数在中缀和后缀表达法中出现的顺序是相同的，因此可以读到操作数的时候及输出他们；他们不需要存储在栈里。