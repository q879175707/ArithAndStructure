边的另一个特性：权值。边的权可以代表距离，费用，流量等。
先看有权的无向图以及它的最小生成树。

带权图的最小生成树
	优先级队列
		执行算法的关键行为是保存两顶点间建立的边的权值表。通过选择最小的权值，就可以确定下一条边
	连接在何处。
		建议用优先级队列来实现这个用于反复选择最小权值的表，而不用链表或数组。这是解决最小生成树
	的有效方式。可以用堆，也可以用数组来实现。
	
	算法要点
	从一个顶点开始，把它放入树的集合中。然后重复做下面的事情：
	1.找到从最新的顶点到其他顶点的所有边，这些顶点不能在树的集合中。把这些边放入优先级队列。
	2.找出权值最小的边，把它和它所到达的顶点放入树的集合中。
	重复这些步骤，直到所有顶点都在树的集合中。
	在步骤1，“最新的”意味着最近放入树中的。此步骤的边可以在邻接矩阵中找到。步骤1完成后，表中
包含了所有的边，这些边都是从树中顶点到它们的不在树中的邻接点的连接。
	无用边
	在表剩余条目中，想要把某些连接删除会比较困难。
	在程序的算法中，要确保优先级队列中不能有连接已在树中的顶点的边。每次向树中增加顶点后，都
要遍历优先级队列查找并删除这样的边。

Java代码
	编制有向图最小生成树的方法mstw().假定在vertexList[]数组中有一个顶点列表，并且从下标0的顶点开
始。currentVert代表最近加入到树中的顶点。
	算法在while循环中执行，循环结束条件是所有顶点都已在树中。循环完成下面操作：
	1.当前顶点放在树中。
	2.连接这个顶点的边放到优先级队列中。
	3.从优先级队列中删除权值最小的边。这条边的目的顶点变成当前顶点。