图简介
	图是一种与树有些相似的数据结构，从数学意义上说，树是图的一种。在计算机程序设计中，图的应用
方式与树不同。
	图通常有一个固定的形状，这是由屋里或抽象的问题所决定的。例如，图中节点表示城市，而边可能表
示城市间的班机航线。图的形状取决于真实世界的具体情况。
	当讨论图时，节点通常叫做顶点。
定义
	在图中圆圈是顶点，线是边。每条边由两个顶点作为两端。
邻接
	如果两个顶点被同一条边连接，就称这两个顶点是邻接的。
路径
	路径是边的序列。比如从A-D  A-B-C-D 。abcd就是a到d的路径
连通图
	如果至少有一条路径可以连接起所有的顶点，那么这个图被称作连通的。
有向图和带权图
	图中的边没有方向；可以从任意一边到另一边。是无向图。 比如从顶点A到顶点B ，也可以从B到A
	另一种情况就是只能沿着边朝一个方向移动。就像单行道一样。这样的图被称为有向的。
	在某些图中，边被赋予一个权值，权值是一个数字，它能代表两个顶点间的物理距离，或者从一个顶点
到另一个顶点的时间，或者是两点间的花费。这样的图叫做带权图。
===================================================================================
===================================================================================
===================================================================================
在程序中表示图

顶点
	通常用一个顶点类的对象来表示一个顶点。例如顶点代表城市，那么它需要存储城市名字、地理位置等信息。
	实例程序仅存储了一个字母用来标识顶点，同时还有一个标志位。
	class Vertex 
	{
		public char lable;		// lable(e.g. 'A')
		public boolean wasVisited;
		
		public Vertex(char lab)
		{
			label = lab;
			wasVisited = false;
		}
	}
	顶点对象能放在数组中，然后用下标指示。顶点也可以放在链表中或其他数据结构中。存储只是为了方
便。这与如何连接边没有关系。

边
	图不像树，拥有几种固定的结构。二叉树中，每个节点最后有两个子节点，但图的每个顶点可以与任意
多个顶点连接。
	为了模拟这种自由形式的组织结构，需要用一种不同的方法表示边，比树的表示方法更合适些。一般用
两个方法表示图：邻接矩阵和邻接表。

邻接矩阵
	邻接矩阵是一个二维数组，数据项表示两点间是否存在边。如果图有N个顶点，邻接矩阵就是N*N的数组
			A	B	C	D
		A	0	1	1	1
		B	1	0	0	1
		C	1	0	0	0
		D	1	1	0	0
	顶点被用作行和列的标题。两个顶点间有边则标识为1，没有边则表示为0（也可以用布尔类型的true/false）
如图所示顶点A和另外三个顶点邻接，B和A、D邻接，C只和A邻接，而D和A、B邻接。
	邻接矩阵提供了关于当前顶点的位置信息。

邻接表
	表示边的另一种方法是邻接表。邻接表中的表指的是链表中讨论的那种链表。实际上，邻接表是一个链表
数组（或者是链表的链表）。每个单独的链表表示了有哪些顶点与当前顶点邻接。
	顶点		包含邻接顶点的链表
	A			B->C->D
	B			A->D
	C			A
	D			A->B
	在这个表中，符号->表示链表中的一个节点。链表中每个节点都是一个顶点。在这里的每个链表中，顶点
按字母顺序排列，这并不是必须的。邻接表表示了当前顶点与哪些顶点连接——即两个顶点之间存在边，而不
是表示顶点间的路径。

在图中添加顶点和边
	为了向图中添加顶点，必须新建一个新的顶点对象，然后插入到顶点数组中。
	vertexList[nVerts++] = new Vertex('A');
	这样就插入了顶点A，nVerts变量是图中当前顶点数。
	怎样添加边取决于用邻接矩阵还是用邻接表表示图。假定用邻接矩阵并考虑在顶点1和顶点3之间加一条边
这些数字对应vertexList数组的下标，顶点存储在数组的对应位置。首次创建邻接矩阵adjMat(adjacency matrix)
时，初值为0.代码如下：
	adjMat[1][3] = 1;
	adjMat[3][1] = 1;
	如果使用邻接表，就把1加到3的链表中，然后把3加到1的链表中。
	
搜索
	图中最基本的操作之一就是搜索从一个指定顶点可以到达哪些顶点。
	有两种常用的方法可用来搜索图：深度优先搜索（DFS）和广度优先搜索（BFS）。它们最终都会到达所有
连通的顶点。深度优先搜索通过栈来实现，而广度优先搜索通过队列实现。
===================================================================================
===================================================================================
===================================================================================
===================================================================================
深度优先搜索
	在搜索到尽头的时候，深度优先搜索用栈记住下一步的走向。
	为了实现深度优先搜索，找一个起始点。需要做三件事：首先访问该顶点，然后把该点放入栈中，最后标记
该点，这样就不会再访问它。
                B->F->H
		     /
           A->C
           | \D->G->I
           E
	下面可以访问任何与顶点A相连的顶点。只要还没访问过它。
	规则1
	如果可能，访问一个邻接的未访问顶点，标记它，并把它放入栈中。
	
	当访问到没有邻接顶点的 顶点时如H，需要用到规则2
	规则2
	当不能执行规则1时，如果栈不空，就从栈中弹出一个顶点。
	根据这条规则，从栈中弹出H，这样就回到了顶点F（F邻接H）。F也没有与之邻接且未访问的顶点了。那么
再弹出F，返回到顶点B。这时只有A在栈中。
	然而A还有未访问的邻接点，所以访问下一个顶点C。C是顶点，从栈中弹出C，再次回到A。接着访问D、G、I
到达I时，把它们都弹出来，访问E，回到A。现在A也没有未访问的邻接点。弹出A。现在栈中已经无顶点。
下面是规则3
	规则3
	如果不能执行规则1和规则2，就完成了整个搜索过程。
	
	深度优先搜索算法要得到距离起始点最远的顶点，然后在不能继续前进的时候返回。使用深度这个术语表示
与起始点的距离，这就是深度优先搜索的意义。

	深度优先算法的关键在于找到与某一顶点邻接且没有访问过的顶点。邻接矩阵是关键。找到指定顶点所在的
行，从第一列开始向后寻找值为1的列；列号是邻接顶点的号码。检查这个顶点是否未访问过，如果是，这就是
要访问的下一个顶点。如果该行没有顶点既等于1（邻接）且又是未访问的，那么与指定点相邻接的顶点就全部
访问过了。
	// returns an unvisited vertes adjacent to v
	public int getAdjUnvisitedVertex(int v)
	{
		for (int j = 0; j < nVerts; j++)
			if (adjMat[v][j] ==1 && vertexList[j].wasVisited == false)
				return j;				// return first such vertex
				
		return -1;		// no such vertices
	}
	dfs()方法，执行了深度优先搜索。这段代码包含了前面提出的三条规则。它循环执行，直到栈为空。每次循环
它做四件事：
	1.用peek()方法检查栈顶的顶点。
	2.试图找到这个顶点还未访问的邻接点。
	3.如果没有找到，出栈。
	4.如果找到这样的顶点，访问这个顶点，并把它放入
	public void dfs() // depth-first search
	{
		vertexList[0].wasVisited = true;	// begin at vertex 0 mark it
		displayVertex(0);						// display it
		theStack.push(0);					// push it
		
		while ( !theStack.isEmpty)
		{
			// get an unvisited vertex adjacent to stack top
			int v = getAdfUnvisitedVertex( theStack.peek());
			if (v == -1)						// if no such vertex,
				theStack.pop();				// pop a new one
			else								// if it exist,
			{
				vertexList[v].wasVisited=true	// mark it
				displayVertex(v);					// display it
				theStack.push(v);				// push it
			}
		} // end while
		
		// stack is empty. is done. reset flags.
		for (int j = 0; j < nVerts; j++)
			vertgexList[j].wasVisited = false;
	} // end dfs
	方法最后，重置了所有wasVisited标记位，这样可以在稍后继续使用dfs方法。栈此时已为空，所以不需要重置
===================================================================================
===================================================================================
===================================================================================
===================================================================================
广度优先搜索
	深度优先搜索中，算法表现得好像要尽快地远离起始点似的。相反，在广度优先搜索中，算法好像要尽可能
地靠近起始点。它首先访问起始顶点的所有邻接点，然后再访问较远的区域。这种搜索不能用栈，要用队列实现
                B->F->H
		     /
           A->C
           | \D->G->I
           E
	A是起始点，所以访问它，并标记为当前顶点。然后应用下面几条规则
	规则1
	访问下一个未来访问的邻接点（如果存在），这个顶点必须是当前顶点的邻接点，标记它，并把它插入到队列中。
	
	规则2
	如果因为已经没有未访问顶点而不能执行规则1，那么从队列头取一个顶点（如果存在），并使其成为当前顶点。
	
	规则3
	如果因为队列为空而不能执行规则2，则搜索结束。
	
	因此，需要首先访问所有与A邻接的顶点，并在访问的同时把它们插入到队列中。现在已经访问了A、B、C、D和E
这时队列（从头到尾）包含BCDE。
	已经没有未访问的且与顶点A邻接的顶点了，所以从队列中取出B，寻找和B邻接的顶点。这时找到F，所以把F插入
到队列中。已经没有未访问的且与顶点B邻接的顶点了，所以从队列中取出C，它没有未访问的邻接点，因此取出D并
访问G。D没有未访问的邻接点，取出E。现在队列中有FG。取出F，访问H。取出G，访问I。
	现在队列中有HI，但当取出它们时，发现没有其他的未访问项，这时队列为空。结束。	
	
java代码
	bfs()方法和dfs()方法类似，只是用队列代替了栈，嵌套的循环代替了单层循环。外层循环等待队列为空，内层循环
依次寻找当前顶点的未访问邻接点。
	public void bfs()	// breadth-first search
	{
		vertexList[0].wasVisited = true;			//begin at vertex 0 mark it
		displayVertex(0);								// display it
		theQueue.insert(0);							// insert at tail
		int v2;
		
		while(!theQueue.isEmpty())					// until queue empty
		{
			int v1 = theQueue.remove();			// remove vertex at head
			// until it has no unvisited neighbors
			while ((v2=getAdjUnvisitedVertex(v1)) != -1)
			{
				vertexList[v2].wasVisited = true;	// get one, mark it
				displayVertex(v2);					// display it
				theQueue.insert(v2);					// insert it
			}
		}// end while
		
		// queue is empty, end. reset flags
		for (int j = 0; j < nVerts; j++) 
			vertexList[j].wasVisited = false;
	}
	
	广度优先搜索有一个有趣的属性：它首先知道与起始点相距一条边的所有顶点，然后是与起始点相距两条边的顶点
，以此类推。如果要寻找起始顶点到指定顶点的最短距离，那么这个属性非常有用。执行BFS，当找到指定顶点时，就
可以说这条路径是到这个顶点的最短路径。如果有更短的路径，BFS算法就应该已经找到过它了。
===================================================================================
===================================================================================
===================================================================================
最小生成树
	MST最小生成树，顶点之间最短的连线。比如5个顶点用4个边连接是最少数量的边保证它们连接。
	最小生成树的边E数量总比顶点V的数量小1：E = V - 1;
	下面是mst()方法的代码:
	public void mst() 
	{
		while(!theStack.isEmpty() ) 	//until stack empty
		{
			// get stack top
			int currentVertex = theStack.peek();
			// get next unvisited neighbor
			int v = getAdjUnvisitedVertex(currentVertex);
			if (v == -1)			// if no more neighbors pop it away
				theStack.pop();
			else					// got a neighbor
			{
				vertexList[v].wasVisited = true;	// mark it
				theStack.push(v);					// push it
				displayVertex(currentVertex);		// from current V
				displayVertex(v);						// to v
				System.out.print(" ");
			}
		}	// end while(stack not empty)
	
		for (int j = 0; j < nVerts; j++)
			vertexList[j].wasVisited = false;
	
	}
	这段代码与dfs（）方法非常类似，然而，在else语句中，当前顶点与它下一个未访问邻接点被显示。这里两个顶点
决定了一条边，沿着这条边，算法将要访问下一个新的顶点。所有这样的边就组成了最小生成树。
	最小生成树比较容易从深度优先搜索得到，这是因为DFS访问所有顶点，但只访问一次。它对不会两次访问同一个
顶点。当它看到某条边到达一个已访问的顶点，它就不会走这条边。它从来不遍历那些不可能的边。因此，DFS算法
走过整个图的路径必定是最小生成树。
===================================================================================
===================================================================================
===================================================================================
有向图的拓扑排序
	有向图需要一种新的特性：边有方向。在有向图中，只能沿着边指定的方向移动。
	在程序中，有向图和无向图的区别是有向图的边在邻接矩阵中只有一项。
		A	B	C
	A	0	1	0
	B	0	0	1
	C	0	0	0
	1代表一条边，行标表示边从哪里开始，列表表示边到哪里结束。因此，行A列B的值为1
	表示从A到B的边。
	对于有向图，增加边的方法只需要一条语句，
	public void addEdge(int start, int end)
	{
		adjMat[start][end] = 1;
	}

拓扑排序算法
	步骤1
	找到一个没有后继的顶点。
	顶点的后继也是一些顶点。该节点与它们由一条边相连，并且边的方向指向它们。如果也有一条边从A指向B，那么B
就是A的后继。
	步骤2
	从图中删除这个顶点，在列表的前面插入顶点的标记。
	
	重复步骤1和步骤2，直到所有顶点都从图中删除。这时，列表显示的顶点顺序就是拓扑排序的结果。
	删除顶点是算法的核心。如果第一个顶点不处理，算法就不能计算要处理的第二个顶点。算法能够执行是因为，如果一个顶点
没有后继，那么它肯定是拓扑序列中的最后一个。一旦删除它，剩下的顶点中必然有一个没有后继，所以它成为下一个拓扑序列中
的最后一个，依次类推。
	有一种图是拓扑排序不能处理的，就是有环图。路径的起点和终点都是同一个顶点。如果有N个顶点的图有超过N-1个边
那么它必定存在环。

	public void topo()	//topological sort 
	{
		int orig_nVerts = nVerts;	// remember how many verts
		
		while(nVerts > 0)				// while vertices remain,
		{
			// get a vertex with no successors, or -1
			in currentVertex = noSuccessors();
			if (currentVertex == -1)	// must be a cycle
			{
				System.out.println("ERROR:Graph has cycles");
				return;
			}
			
			// insert vertex label in sorted array(start at end)
			sortedArray[nVerts - 1] = vertexList[currentVertex].label;
			
			deleteVertex(currentVertex);	//delete vertex
		}	// end while
		
		// vertices all gone; display sortedArray
		System.out.print("Topologically sorted order: ");
		for (int j =0; j < orig_nVerts; j++)
			System.out.print(sortedArray[j]);
		System.out.println();
	}
	主要工作在while循环中进行。这个循环直到顶点数目为0时才退出。
	1.调用noSuccessors()找到任意一个没有后继的顶点。
	2.如果找到一个这样的顶点，把顶点放入数组sortedArray[]，并且从图中删除顶点。
	3.如果没有这样的顶点，则图必然存在环。
	最后一个被删除的顶点出现在列表的开头，所以，随着nVerts(图中顶点个数)逐渐变小，顶点从sortedArray数组的最后开始，
依次向前排列。
	如果有顶点还在图中，但它们都有后继，那么图必然存在环，算法会显示一条信息并退出。如果没有环，则while循环退出，
显示sortedArray数组中的数据，这时顶点是按拓扑有序排列。
	noSuccessors()方法使用邻接矩阵找到没有后继的顶点。在外层for循环中，沿着每一行考察每个顶点。在每行中，用内层for
循环扫描列，查找值为1的顶点。如果找到一个，就说明顶点有后继，因为从这个顶点到其他点有边存在。当找到一个1时，跳
出内层循环，考察下一个顶点。
	只有整个一行都没有1存在，才说明有一个顶点没有后继；这时，就返回它的行号。如果没有这样的顶点，就返回-1.
	public int noSuccessors()		//return vertex with no successors or -1 if no such vertex
	{
		boolean isEdge;			//edge from row to column in adjMat
		for (int row = 0; row < nVerts; row++)	// for each vertex,
		{
			isEdge = false;							// check edges
			for (int col = 0; col < nVerts; col++)
			{
				if (adjMat[row][col] > 0)		//if edge to another,
				{
					isEdge = true;
					break;							// this vertex has a successor try another
				}
			}
			
			if (!isEdge)							// if no edges, has no successors
				return row;
		}
		return -1;								// no such vertex
	}
	
	除了一些细节外，删除一个顶点很简单。顶点从vertexList[]数组删除，后面的顶点向前移动填补空位。
同样的，顶点的行列从邻接矩阵中删除，下面的行和以后面的列移动来填补空位。

Warshall算法
	如何快速找出是否一个顶点可以从其他顶点到达。
	可以构造一个表，这个表将立即告知一个顶点对另一个顶点是否是可达的。这样的表可以通过系统地
修改图的邻接矩阵得到。由这种修正过的邻接矩阵表示的图，叫做原图的传递闭包。
	它基于一个简单的思想：
	如果能从顶点L到M，并且能从顶点M到N，那么可以从L到M。
Warshall算法的实现
	用三层嵌套循环。外层循环考察哦每一行；称它为变量y。它里面的一层循环考察行中的每个单元，它
使用变量x。如果在单元（y,x）发现1，那么表明有一条边从y到x，这时执行最内层循环，它使用变量z。
	第三个循环检查列y的每个单元，看是否有边以y为终点。如果行z列y值为1，说明有一条边从z到y。一条
边从z到y，另一条边从y到x，就可以说有一条路径从z到x，所以把（z,x）置为1.